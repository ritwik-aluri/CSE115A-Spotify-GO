OVERVIEW
This file contains details provided by each team member about the
module and functional testing they have done.
The equivalence classes making up the expected inputs of each module
are also listed, as well as the unit tests in this file that were
selected to cover them all and show that desired outputs are always
returned.
______________________________________________________________________
Juarez, Michael
Map Component

Details About Module______________________________

Details About Testing_____________________________

Input Equivalence Classes and Relevant Tests______
(Make list of entries like the following line)
Equivalence class: *range of inputs*; Test: *testfilename (I'll use node to do tests)*

______________________________________________________________________
Olano, Jevin
Map Component

Details About Module______________________________
Throughout the quarter, I worked primarily on mapView, an object which
allowed for the display of a Google Map on the main screen of the app.
My responsibility was to make sure that the map would accurately display
the location of the user. This is accomplished via the usage of the
React Native API "react-native-get-location", which, among other things,
allows the app to access the location of the device currently running the
app and store the device's longitude and latitude in special fields.
Those fields could then be accessed and used in mapView, which centers the
given map on said longitude and latitude, displaying a fixed radius of space
around the center point. As the map is essentially the same as the Google
Maps app, it can be manipulated with touch controls (or mouse, in my case,
as I was on an Android emulator for testing). 

Details About Testing_____________________________
Testing this module was pretty straightforward. As the map is a core visual
element of the app, it was readily apparent if the map was displaying incorrect
information or was otherwise broken. All that really needed to be done was
to check to see if the map could handle different locations. By default, the
emulator's location was set to Google's headquarters in Mountain View, and
no matter how many times I ran the code, it stayed that way. However, when I
learned that I could manually change the location of the "device" using the
Android emulator's built-in "set point" system, I was able to verify very 
quickly that mapView was accurately representing the specified location.
______________________________________________________________________

