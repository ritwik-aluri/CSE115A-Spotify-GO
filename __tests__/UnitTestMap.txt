OVERVIEW
This file contains details provided by each team member about the
module and functional testing they have done.
The equivalence classes making up the expected inputs of each module
are also listed, as well as the unit tests in this file that were
selected to cover them all and show that desired outputs are always
returned.
______________________________________________________________________
Juarez, Michael
Map Component

Details About Module______________________________
For this project, I worked mainly on the map portion of the project, which
was mainly accomplished using the React Native Maps library. Using this library,
I was able to display the map on the "canvas" of the React Native application on
our Android Emulator. With the React Native Maps Library we were able to display
and use Google Maps for our application, along with the features that come with
it. I was able to modify the color scheme of the map, using the features and
themes provided by Google Maps. From there, I then worked on placing map markers
on the map, so as to show the other users on the map. I used a map function in JS
to map the data from a list of user data, and displayed the markers on the map using
the built in map marker component from the React Native Maps Library. Built into the
Map Marker component are touch controls, where a user can touch a marker and get
a popup, which was used later on in the project to display the user and the data
associated with the user.

Details About Testing_____________________________
To test this specific module we can essentially boot up the application, as the
map was configured to load on launch. Once the map is loaded, we can test the
map by just using the touch controls, and interacting with it as we would with
any other map application. Since it is essentially Google Maps, it replicates
the functionality of Google Maps almost exactly. Now, to test the markers we
just start up the application, and from there the map along with the markers
should just load as the application reads data from the Firebase database, and
gives that data to the map marker function to display. Once the application is
displayed, we can then just tap on the markers, and the map should center itself
on the marker that was tapped, and it a pop-up window shows up.

Input Equivalence Classes and Relevant Tests______
Input: Touch screen
  The user can use the touch screen to interact with the map, similar to how
  they would use any other map application. The Map will respond in a similar
  fashion to any other Map application.

______________________________________________________________________
Olano, Jevin
Map Component

Details About Module______________________________
Throughout the quarter, I worked primarily on mapView, an object which
allowed for the display of a Google Map on the main screen of the app.
My responsibility was to make sure that the map would accurately display
the location of the user. This is accomplished via the usage of the
React Native API "react-native-get-location", which, among other things,
allows the app to access the location of the device currently running the
app and store the device's longitude and latitude in special fields.
Those fields could then be accessed and used in mapView, which centers the
given map on said longitude and latitude, displaying a fixed radius of space
around the center point. As the map is essentially the same as the Google
Maps app, it can be manipulated with touch controls (or mouse, in my case,
as I was on an Android emulator for testing). 

Details About Testing_____________________________
Testing this module was pretty straightforward. As the map is a core visual
element of the app, it was readily apparent if the map was displaying incorrect
information or was otherwise broken. All that really needed to be done was
to check to see if the map could handle different locations. By default, the
emulator's location was set to Google's headquarters in Mountain View, and
no matter how many times I ran the code, it stayed that way. However, when I
learned that I could manually change the location of the "device" using the
Android emulator's built-in "set point" system, I was able to verify very 
quickly that mapView was accurately representing the specified location.
______________________________________________________________________

