From App.js:

  /*let config = {
    apiKey: "AIzaSyBBogvZGpzfWJeUeloFvvH2xguSyMnmPJA",
    authDomain: "spotify-go-ba7bf.firebaseapp.com",
    // The value of `databaseURL` depends on the location of the database
    databaseURL: "https://spotify-go-ba7bf-default-rtdb.firebaseio.com",
    projectId: "spotify-go-ba7bf",
    storageBucket: "spotify-go-ba7bf.appspot.com",
    // messagingSenderId: "SENDER_ID",
    appId: "1:445520680219:android:f2b7a5d240013fe1dc2fbe",
    // For Firebase JavaScript SDK v7.20.0 and later, `measurementId` is an optional field
    measurementId: "G-MEASUREMENT_ID",
  };
  firebase.initializeApp(config);
  const db = getDatabase();*/
...
  /*GetLocation.getCurrentPosition({
    enableHighAccuracy: true,
    timeout: 15000,
  })
  .then(location => {
    longitude = location.longitude;
    latitude = location.latitude;
  })
  .catch(error => {
    const { code, message } = error;
    console.warn(code, message);
  })*/

  //INITUSER HERE!!!!!!!!!!!!!!!!
...
      /*token_data = result; console.log("token set");
      songInfo = Spotify.getCurrSong(token_data["accessToken"]);
      userInfo = Spotify.getCurrUserInfo(token_data["accessToken"]);
      DBInterfaceInstance.initUser(userInfo.spotifyID, userInfo.displayName, userInfo.profileURL, userInfo.premium, true, longitude, latitude, false,
          Spotify.getCurrSong(token_data["accessToken"]));*/


  // Use the DBInterface class instance to init users, update the database, and get nearby users
  // from now on! :)
  // The class is here: android/app/src/database/DBInterface.js
  // Also, note that each user in the outputted list of DBInterfaceInstance.getNearbyUsers() can be
  // treated as an object and their fields' data obtained with dot notation! All users are assumed
  // to be structured as the "DBsample" user is.
  // The last thing to note is that the parameter to getNearbyUsers() is supposed to be the current
  // user's Spotify auth key, used to index the users in the database (as an example, Gabe's is
  // already in there). So, Gabe, uh, replace that parameter that I've hardcoded to "DBsample" with
  // your thing above.
  //   - Ritwik

  // This is a new push to the database, completely testing.
  /*set(ref(db, 'users/' + "Guy"), {
    music: "Second Chance",
    premium: true,
    sharing: true,
    latitude: 37.78835,
    longitude: -122.4314
  });

  // Populates the nearby user list from the Users table
  const populateList = () => {
    const users = ref(db, 'users/');
    onValue(users, (snapshot) => {
      snapshot.forEach((child) => {
        userList.push({
          id: child.key,
          title: child.val().music,
          artist: 'N/A',
          premium: child.val().premium,
          sharing: child.val().sharing,
          latitude: child.val().latitude,
          longitude: child.val().longitude
        })
      })
    })
  };

  userList.length = 0;
  populateList();

  console.log("Printing userList at bottom of App() function: ")
  console.log(userList);*/


  




From interface.js/bottomNagivationBackground:

<View style = {{ // Background gradiance
  position: 'relative',
  alignSelf: 'center',
  background: 'linear-gradient(to top, rgba(40,40,40,255), rgba(255,0,0,0))',
  width: '100%',
  height: 30
}} />

From interface.js/ProfileScreen & SettingsScreen:

const exitButton = (
  <TouchableOpacity activeOpacity = '1' style={[styles.button]} onPress={() => navigation.navigate('Home')}>
    <View style = {{ marginTop: 'auto', marginBottom: 'auto', marginLeft: 'auto', marginRight: 'auto'}}><Icon_Entypo name="cross" color="white" size={33}/></View>
    <View style = {{marginTop: '10%'}}><Text style = {[styles.buttonText]}>Return</Text></View>
  </TouchableOpacity>
)

From interface.js/Searchbar:

const searchBar = ( // Search Bar Display
  <View style={[styles.searchBar]}>
    <TextInput
      styles={[styles.searchBarText]}
      onChangeText={onChangeText}
      placeholder={"Search..."}
    />
  </View>
);

From interface.js/RightSideButtons:

const rightSideButtons = ( // Right-side buttons
  <View style = {{
    position: 'absolute',
    top: 20,
    right: 5
  }}>
    <TouchableOpacity
      activeOpacity={0.5}
      style={[styles.rightButton]}
    >
    </TouchableOpacity>
    <View style={{height: 10}}/>
    <TouchableOpacity
      activeOpacity={0.5}
      style={[styles.rightButton]}
    >
      <Icon_Entypo
        name="direction"
        color='rgba(45,45,45,255)'
        size={35}
        style={{marginLeft: 'auto',
                marginRight: 'auto',
                marginTop: '23%'}}
      />
      <Text style={[styles.buttonText]}></Text>
    </TouchableOpacity>
  </View>
);